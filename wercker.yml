#The container definition we want to use for developing our app
box: golang

# Defining the dev pipeline
dev:
  steps:
    # Create cities-controller.json for initialization
    - script:
        name: create cities-controller.json
        code: ./create_cities-controller.json.sh

    - internal/watch:
        code: |
          go build ./...
          ./source
        reload: true

build:
    box: golang
    steps:

    - wercker/golint

    # Test the project
    - script:
        name: go test
        code: go test ./...

    # Statically build the project
    - script:
        name: go build
        code: CGO_ENABLED=0 go build -a -ldflags '-s' -installsuffix cgo -o app .

    # Create cities-controller.json for initialization
    - script:
        name: create cities-controller.json
        code: ./create_cities-controller.json.sh

    # Copy binary to location that gets passed along to deploy
    - script:
        name: copy binary
        code: cp app cities-service.json cities-controller.json "$WERCKER_OUTPUT_DIR"

deploy:
    box: google/cloud-sdk
    
    steps:

    # push image to google registry grc.io
    - script:
        name: install jq
        code: wget -O /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5rc1/jq-linux-x86_64-static && chmod a+x /usr/local/bin/jq
        
    - script:
        name: gcr.io authentication
        code: |
          gcloud auth activate-refresh-token $GCLOUD_ACCOUNT $GCLOUD_REFRESH_TOKEN
          gcloud docker --authorize-only
          export GCR_AUTH_TOKEN=$(cat $HOME/.dockercfg | jq --raw-output '.["https://gcr.io"].auth' | base64 --decode | cut -d ':' -f2)
          
    - internal/docker-push:
        username: _token
        password: $GCR_AUTH_TOKEN
        repository: gcr.io/eu-clusters/wercker
        registry: https://gcr.io
        tag: $WERCKER_GIT_COMMIT
        ports: "5001"
    
    # Run this to create the rc and service
    initialize:
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        insecure-skip-tls-verify: true
        command: create -f cities-service.json
        debug: true

    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        insecure-skip-tls-verify: true
        command: create -f cities-controller.json
        debug: true



    # Update the replica controller to $WERCKER_GIT_COMMIT
    rolling-update:
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        insecure-skip-tls-verify: true
        command: rolling-update cities
        image: gcr.io/eu-clusters/wercker:$WERCKER_GIT_COMMIT
